package chess;

import java.util.Arrays;
import java.util.Objects;


/**
 * A chessboard that can hold and rearrange chess pieces.
 * <p>
 * Note: You can add to this class, but you may not alter
 * signature of the existing methods.
 */
public class ChessBoard {
    private final ChessPiece[][] squares = new ChessPiece[8][8];

    public ChessBoard() {
        //should i have this or have nothing in here?
        resetBoard();
    }

    /**
     * Adds a chess piece to the chessboard
     *
     * @param position where to add the piece to
     * @param piece    the piece to add
     */
    public void addPiece(ChessPosition position, ChessPiece piece) {
        squares[position.getRow()][position.getColumn()] = piece;
        //throw new RuntimeException("Not implemented");

    }

    /**
     * Gets a chess piece on the chessboard
     *
     * @param position The position to get the piece from
     * @return Either the piece at the position, or null if no piece is at that
     * position
     */
    public ChessPiece getPiece(ChessPosition position) {
        return squares[position.getRow()][position.getColumn()];
        //throw new RuntimeException("Not implemented")
    }

    /**
     * Sets the board to the default starting board
     * (How the game of chess normally starts)
     */
    public void resetBoard() {
        //1. Turn everything back to null
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                squares[row][col] = null;
            }
        }
        //2. make a new piece
        //3. make a new position
        //add that position to the square using the add piece method
        //helper functions so this function doesn't get too long
        resetPawns();
        resetRooks();
        resetKnight();
        resetBishops();
        resetQueen();
        resetKing();
    }

    public void resetPawns() {
        for (int col = 0; col < 8; col++) {
            //white
            addPiece(new ChessPosition(1, col),
                    new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.PAWN));

            //black
            addPiece(new ChessPosition(6, col),
                    new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.PAWN));
        }
    }

    public void resetRooks() {
        //white
        addPiece(new ChessPosition(0, 0),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.ROOK));

        addPiece(new ChessPosition(0, 7),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.ROOK));

        //black
        addPiece(new ChessPosition(7, 0),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.ROOK));

        addPiece(new ChessPosition(7, 7),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.ROOK));

    }

    public void resetKnight() {
        //white
        addPiece(new ChessPosition(0, 1),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.KNIGHT));

        addPiece(new ChessPosition(0, 6),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.KNIGHT));

        //black
        addPiece(new ChessPosition(7, 1),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.KNIGHT));

        addPiece(new ChessPosition(7, 6),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.KNIGHT));
    }

    public void resetBishops() {
        //white
        addPiece(new ChessPosition(0, 2),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.BISHOP));

        addPiece(new ChessPosition(0, 5),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.BISHOP));

        //black
        addPiece(new ChessPosition(7, 2),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.BISHOP));
        addPiece(new ChessPosition(7, 5),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.BISHOP));
    }

    public void resetQueen() {
        //white
        addPiece(new ChessPosition(0, 3),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.QUEEN));

        //black
        addPiece(new ChessPosition(7, 3),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.QUEEN));
    }

    public void resetKing() {
        //white
        addPiece(new ChessPosition(0, 4),
                new ChessPiece(ChessGame.TeamColor.WHITE, ChessPiece.PieceType.KING));

        //black
        addPiece(new ChessPosition(7, 4),
                new ChessPiece(ChessGame.TeamColor.BLACK, ChessPiece.PieceType.KING));
    }

    /**
     *
     */
    @Override
    public boolean equals(Object o) {
        //generated by code -> generate -> equals and hashCode
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChessBoard that = (ChessBoard) o;
        return Objects.deepEquals(squares, that.squares);
    }

    /**
     *
     */
    @Override
    public int hashCode() {
        //generated by code -> generate -> equals and hashCode
        return Arrays.deepHashCode(squares);
    }

    /**
     *
     */
    @Override
    public String toString() {
        //generated by code -> generate -> toString
        return "ChessBoard{" +
                "squares=" + Arrays.toString(squares) +
                '}';
    }
}
